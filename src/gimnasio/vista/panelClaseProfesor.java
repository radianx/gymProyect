/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gimnasio.vista;

import gimnasio.controlador.ControladorPrincipal;
import gimnasio.herramientas.excepciones.Notificaciones;
import gimnasio.modelo.Clase;
import gimnasio.modelo.ClaseProfesor;
import gimnasio.modelo.HorarioProfesor;
import gimnasio.modelo.Modalidad;
import gimnasio.modelo.Profesor;
import gimnasio.modelo.Profesormodalidad;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Family
 */
public class panelClaseProfesor extends javax.swing.JPanel {

    ControladorPrincipal miControlador;
    panelClaseProfesorHorario otroPanel;
    boolean libre = false;
    /**
     * Creates new form PanelClaseProfesor
     */
    public panelClaseProfesor(ControladorPrincipal miControlador, panelClaseProfesorHorario panelOtro) {
        this.miControlador = miControlador;
        otroPanel = panelOtro;
        initComponents();
        try {
            cargarComboProfesor();
            cargarComboModalidades((Profesor) cmbProfesores.getSelectedItem());
            cargarComboClases((Profesor) cmbProfesores.getSelectedItem());
        }catch(Notificaciones ex){
            JOptionPane.showMessageDialog(null, ex.getMessage());
            ex.printStackTrace();
        }
    }

    
    public void cargarComboProfesor() throws Notificaciones{
        List<Profesor> listaProfesores = new ArrayList<>();
        for(Profesor unProfe:miControlador.getListaProfesores()){
            if(unProfe.getEstado().equalsIgnoreCase("ACTIVO")){
                listaProfesores.add(unProfe);
            }
        }
        DefaultComboBoxModel modeloCombo = new DefaultComboBoxModel(listaProfesores.toArray());
        this.cmbProfesores.setModel(modeloCombo);
    }
    
    public void cargarComboClases(Profesor unProfesor){
        List<Clase> listaClasesProfe = new ArrayList<>();
        List<Clase> listaRetorno = new ArrayList<>();
        
        try {
            for (ClaseProfesor unaClaseProfesor : unProfesor.getClaseProfesors()) {
                if (unaClaseProfesor.getEstado().equalsIgnoreCase("ACTIVO")) {
                    listaClasesProfe.add(unaClaseProfesor.getClase());
                }
            }
        } catch (NullPointerException e) {
            System.out.println("Valor null en cargarComboClases de PanelClaseProfesor" + e);
        }
        boolean bandera = false;
        for (Clase unaClase : miControlador.getListaClases()) {
            if (unaClase.getEstado().equalsIgnoreCase("ACTIVO")) {
                for (Clase otraClase : listaClasesProfe) {
                    if (unaClase.getIdclase() == otraClase.getIdclase()) {
                        bandera = true;
                        break;
                    }
                }
                if (bandera == false) {
                    if(!unaClase.getTipoclase().equalsIgnoreCase("LIBRE")){
                        cmbClase.addItem(unaClase.toString());
                    }
                } else {
                    bandera = false;
                }
            }
        }
    }
    
    public void cargarComboModalidades(Profesor unProfesor){
        Modalidad unaModalidad;
        try{
            for (Profesormodalidad profeModa : unProfesor.getProfesorModalidads()) {
                if (profeModa.getEstado().equalsIgnoreCase("ACTIVO")) {
                    unaModalidad = profeModa.getModalidad();
                    if (unaModalidad.getEstado().equalsIgnoreCase("ACTIVO")) {
                        cmbModalidad.addItem(unaModalidad.getNombremodalidad());
                    }
                }
            }
        }catch(NullPointerException e){
            System.out.println("CargarComboModalidades: valor nulo para unProfesor: "+e);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        cmbProfesores = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        cmbClase = new javax.swing.JComboBox<>();
        cmbModalidad = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        lblFoto = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnCancelar = new javax.swing.JButton();
        btnSiguiente = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(595, 300));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel13.setText("Profesor:");

        cmbProfesores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbProfesoresActionPerformed(evt);
            }
        });

        jLabel12.setText("Clase:");

        cmbClase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbClaseActionPerformed(evt);
            }
        });

        jLabel17.setText("Modalidad:");

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblFoto, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblFoto, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel17)
                    .addComponent(jLabel13)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmbModalidad, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbProfesores, 0, 220, Short.MAX_VALUE)
                    .addComponent(cmbClase, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbProfesores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbClase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(cmbModalidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnCancelar.setText("CANCELAR");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnSiguiente.setText("SIGUIENTE");
        btnSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSiguienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnCancelar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 401, Short.MAX_VALUE)
                .addComponent(btnSiguiente)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSiguiente)
                    .addComponent(btnCancelar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(jPanel2, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbProfesoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbProfesoresActionPerformed
        if(!libre){
            this.cargarComboModalidades((Profesor) cmbProfesores.getSelectedItem());
            this.cargarComboClases((Profesor) cmbProfesores.getSelectedItem());
        }else{
            this.cargarComboModalidades((Profesor) cmbProfesores.getSelectedItem());
        }
        System.out.println("pasando");
    }//GEN-LAST:event_cmbProfesoresActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSiguienteActionPerformed
       try{
           Profesor unProfe = (Profesor) cmbProfesores.getSelectedItem();
           Modalidad unaModalidad = miControlador.dameModalidad(String.valueOf(cmbModalidad.getSelectedItem()));
           Clase unaClase = miControlador.dameClase(String.valueOf(cmbClase.getSelectedItem()));
           List<HorarioProfesor> horarios = new ArrayList<>();
           otroPanel.recibirDatos(null,unProfe, unaModalidad, unaClase, horarios);
           this.setVisible(false);
       }catch(Exception ex){
           JOptionPane.showMessageDialog(null, "Verifique que los datos sean correctos");
           ex.printStackTrace();
       }
    }//GEN-LAST:event_btnSiguienteActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown

    }//GEN-LAST:event_formComponentShown

    private void cmbClaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbClaseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbClaseActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnSiguiente;
    private javax.swing.JComboBox<String> cmbClase;
    private javax.swing.JComboBox<String> cmbModalidad;
    private javax.swing.JComboBox<String> cmbProfesores;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel lblFoto;
    // End of variables declaration//GEN-END:variables

    public void reLoad() {
        try {
            cargarComboProfesor();
            cargarComboModalidades((Profesor) cmbProfesores.getSelectedItem());
            cargarComboClases((Profesor) cmbProfesores.getSelectedItem());
        }catch(Notificaciones ex){
            JOptionPane.showMessageDialog(null, ex.getMessage());
            ex.printStackTrace();
        }
    }

    public void cargarLibre() {
        try{
            cargarComboProfesor();
            cargarComboModalidades((Profesor) cmbProfesores.getSelectedItem());
            cargarComboClasesLibres();
        }catch(Notificaciones ex){
            JOptionPane.showMessageDialog(null, ex.getMessage());
            ex.printStackTrace();
        }
    }

    public void cargarComboClasesLibres() {
        libre = true;

        for (Clase unaClase : miControlador.getListaClases()) {
            if(unaClase.getTipoclase().equalsIgnoreCase("LIBRE")){
                cmbClase.addItem(unaClase.toString());
            }
        }
    }
}
