/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gimnasio.vista;

import com.github.lgooddatepicker.components.TimePickerSettings;
import com.github.lgooddatepicker.components.TimePickerSettings.TimeIncrement;
import gimnasio.controlador.ControladorPrincipal;
import gimnasio.herramientas.excepciones.Notificaciones;
import gimnasio.modelo.Clase;
import gimnasio.modelo.ClaseProfesor;
import gimnasio.modelo.HorarioProfesor;
import gimnasio.modelo.Modalidad;
import gimnasio.modelo.Profesor;
import gimnasio.modelo.Profesormodalidad;
import java.time.DayOfWeek;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.Month;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.SortedSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Family
 */
public class panelClaseProfesor extends javax.swing.JPanel {

    DefaultComboBoxModel modeloComboClases;
    DefaultComboBoxModel modeloComboModalidades;
    DefaultTableModel modeloTablaProfesor;
    DefaultTableModel modeloTablaDias;
    ControladorPrincipal miControlador;
    TableRowSorter<TableModel> rowSorter;
    
    public panelClaseProfesor(ControladorPrincipal controlador) {
        miControlador = controlador;
        initComponents();
            cargarComboClases();
            cargarTablaDiasClases();

            cargarTabla();
        rowSorter = new TableRowSorter<>(this.tablaProfesores.getModel());
        tablaProfesores.setRowSorter(rowSorter);
    }
    
    public void cargarComboClases(){
        modeloComboClases = new DefaultComboBoxModel();
        for(Clase miClase: miControlador.getListaClases()){
            if(miClase.getEstado().equalsIgnoreCase("ACTIVO")){
                modeloComboClases.addElement(miClase);
            }
        }
        cmbClase.setModel(modeloComboClases);
    }

    public void cargarComboModalidades(Profesor unProfe) throws Notificaciones{
        ArrayList<Modalidad> listaModalidades = new ArrayList<>();
        for(Profesormodalidad profeModa: unProfe.getProfesorModalidads()){
            if(profeModa.getModalidad().getEstado().equalsIgnoreCase("ACTIVO")){
                listaModalidades.add(profeModa.getModalidad()); // aca se mostraria promociones
            }
        }
        modeloComboModalidades = new DefaultComboBoxModel(listaModalidades.toArray());
        this.cmbModalidad.setModel(modeloComboModalidades);

    }
    
    public void cargarTablaDiasClases(){
        this.modeloTablaDias = new DefaultTableModel();
        modeloTablaDias.addColumn("Clase");
        modeloTablaDias.addColumn("Dia");
        modeloTablaDias.addColumn("Inicio");
        modeloTablaDias.addColumn("Fin");

        this.tablaDiasClase.setModel(modeloTablaDias);

    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnGuardar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnCerrar = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        TimePickerSettings configuracionTiempo = new TimePickerSettings();
        configuracionTiempo.setAllowEmptyTimes(false);
        configuracionTiempo.setAllowKeyboardEditing(false);
        configuracionTiempo.generatePotentialMenuTimes(TimePickerSettings.TimeIncrement.FifteenMinutes, LocalTime.of(7, 0), LocalTime.of(23,0));
        timePicker1 = new com.github.lgooddatepicker.components.TimePicker(configuracionTiempo);
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaProfesores = new javax.swing.JTable();
        txtBuscar = new javax.swing.JTextField();
        btnBuscar3 = new javax.swing.JButton();
        cmbClase = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        TimePickerSettings timeSettings = new TimePickerSettings();
        timeSettings.setAllowEmptyTimes(false);
        timeSettings.setAllowKeyboardEditing(false);
        timeSettings.generatePotentialMenuTimes(TimePickerSettings.TimeIncrement.FifteenMinutes, LocalTime.of(7, 0), LocalTime.of(23,0));
        timePicker2 = new com.github.lgooddatepicker.components.TimePicker(timeSettings);
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        cmbDia = new javax.swing.JComboBox<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablaDiasClase = new javax.swing.JTable();
        btnAgregar = new javax.swing.JButton();
        txtProfesor = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        cmbModalidad = new javax.swing.JComboBox<>();

        setMinimumSize(new java.awt.Dimension(484, 370));
        setPreferredSize(new java.awt.Dimension(484, 370));
        setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnGuardar.setText("GUARDAR");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        jPanel1.add(btnGuardar);

        btnLimpiar.setText("LIMPIAR");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        jPanel1.add(btnLimpiar);

        btnCerrar.setText("CERRAR");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });
        jPanel1.add(btnCerrar);

        add(jPanel1, java.awt.BorderLayout.PAGE_END);

        jLabel4.setText("<HTML><u>Horario</u></HTML>");

        jLabel5.setText("Nombre:");

        jScrollPane4.setBorder(javax.swing.BorderFactory.createTitledBorder("Seleccionar Profesor"));

        tablaProfesores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaProfesores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaProfesoresMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tablaProfesores);

        txtBuscar.setMinimumSize(new java.awt.Dimension(109, 20));
        txtBuscar.setPreferredSize(new java.awt.Dimension(150, 20));
        txtBuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscarKeyReleased(evt);
            }
        });

        btnBuscar3.setText("Buscar");

        jLabel12.setText("Clase:");

        jLabel13.setText("Desde:");

        jLabel14.setText("Hasta:");

        jLabel15.setText("Dia:");

        cmbDia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Lunes", "Martes", "Miercoles", "Jueves", "Viernes", "Sabado", "Domingo" }));

        jScrollPane5.setBorder(javax.swing.BorderFactory.createTitledBorder("Dias de Clase"));

        tablaDiasClase.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaDiasClase.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaDiasClaseMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tablaDiasClase);

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        txtProfesor.setEditable(false);

        jLabel16.setText("Seleccionado:");

        jLabel17.setText("Modalidad:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(timePicker1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(txtProfesor, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(14, 14, 14)
                                        .addComponent(btnAgregar)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(timePicker2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel16)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(60, 60, 60)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel17)
                                    .addComponent(cmbModalidad, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbDia, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cmbClase, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBuscar3)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtProfesor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbClase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbModalidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(timePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(timePicker2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAgregar))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(jPanel4, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        if(!txtProfesor.getText().isEmpty() && !tablaProfesores.getSelectionModel().isSelectionEmpty()){
            Profesor unProfesor = (Profesor) tablaProfesores.getValueAt(tablaProfesores.getSelectedRow(), 0);
            Set<HorarioProfesor> horarios = new HashSet<>();
            Modalidad unaModalidad = (Modalidad) cmbModalidad.getSelectedItem();
            Clase unaClase = (Clase) cmbClase.getSelectedItem();
            
            for(int i=modeloTablaDias.getRowCount()-1;i>=0;i--){
                HorarioProfesor unHorarioProfesor = (HorarioProfesor)modeloTablaDias.getValueAt(i, 2);
                horarios.add(unHorarioProfesor);
            }
            
            ClaseProfesor claseProfesor = new ClaseProfesor(unaClase, unaModalidad, unProfesor,horarios, "ACTIVO");
            try {
                for(HorarioProfesor unHorario:horarios){
                    unHorario.setClaseProfesor(claseProfesor);
                    unHorario.setEstado("ACTIVO");
                    miControlador.altaHorarioProfesor(unHorario);
                }
                this.miControlador.altaClaseProfesor(claseProfesor);

            } catch (Notificaciones ex) {
                JOptionPane.showMessageDialog(null, "Database: "+ex.getLocalizedMessage());
                ex.printStackTrace();
            }
            JOptionPane.showMessageDialog(null, "Guardado con exito");
            this.setVisible(false);
        }else{
            JOptionPane.showMessageDialog(null, "Error: Profesor no cargado");
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        this.limpiarCampos();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        this.setVisible(false);
        this.limpiarCampos();
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void tablaProfesoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaProfesoresMouseClicked
        if(!tablaProfesores.getSelectionModel().isSelectionEmpty()){
            try {
                Profesor unProfe = (Profesor) tablaProfesores.getValueAt(tablaProfesores.getSelectedRow(),0);
                this.txtProfesor.setText(unProfe.getNombreprofesor() + " " + unProfe.getApellidoprofesor());
                cargarComboModalidades(unProfe);
            } catch (Notificaciones ex) {
                JOptionPane.showMessageDialog(null, ex.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_tablaProfesoresMouseClicked

    private void txtBuscarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarKeyReleased
        String text = this.txtBuscar.getText();
        if (text.trim().length() == 0) {
            rowSorter.setRowFilter(null);
        } else {
            rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
        }
    }//GEN-LAST:event_txtBuscarKeyReleased

    private void tablaDiasClaseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaDiasClaseMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tablaDiasClaseMouseClicked

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
            Clase unaClase = (Clase) cmbClase.getSelectedItem();
            
            String diaSeleccionado = (String) cmbDia.getSelectedItem();
            LocalDate dia = LocalDate.now();
            if(diaSeleccionado.equalsIgnoreCase("Lunes")) dia = LocalDate.now().with(DayOfWeek.MONDAY);
            if(diaSeleccionado.equalsIgnoreCase("Martes"))dia = LocalDate.now().with(DayOfWeek.TUESDAY);
            if(diaSeleccionado.equalsIgnoreCase("Miercoles"))dia = LocalDate.now().with(DayOfWeek.WEDNESDAY);
            if(diaSeleccionado.equalsIgnoreCase("Jueves"))dia = LocalDate.now().with(DayOfWeek.THURSDAY);
            if(diaSeleccionado.equalsIgnoreCase("Viernes"))dia = LocalDate.now().with(DayOfWeek.FRIDAY);
            if(diaSeleccionado.equalsIgnoreCase("Sabado"))dia = LocalDate.now().with(DayOfWeek.SATURDAY);
            if(diaSeleccionado.equalsIgnoreCase("Domingo"))dia = LocalDate.now().with(DayOfWeek.SUNDAY);
            LocalTime horaInicio = timePicker1.getTime();
            LocalTime horaFin = timePicker2.getTime();
            Instant instanteInicio = horaInicio.atDate(dia).atZone(ZoneId.systemDefault()).toInstant();
            Instant instanteFin = horaFin.atDate(dia).atZone(ZoneId.systemDefault()).toInstant();
            
            Date inicio = Date.from(instanteInicio);
            Date fin = Date.from(instanteFin);
            HorarioProfesor horarioProfesor = new HorarioProfesor(inicio, fin);

        if (!isHorarioProfesorHere(horarioProfesor) && inicio.before(fin)) {
            Object[] fila = new Object[4];
            fila[0] = unaClase;
            fila[1] = diaSeleccionado;
            fila[2] = horarioProfesor;
            fila[3] = horarioProfesor.getFinString();
            this.modeloTablaDias.addRow(fila);
        } else{
            JOptionPane.showMessageDialog(null, "Se esta intentando ingresar un horario invalido");
        }

//AlCubierreDrive.engageHyperSpaceTravel(Destination.ANDROMEDA);
    }//GEN-LAST:event_btnAgregarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBuscar3;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JComboBox<String> cmbClase;
    private javax.swing.JComboBox<String> cmbDia;
    private javax.swing.JComboBox<String> cmbModalidad;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable tablaDiasClase;
    private javax.swing.JTable tablaProfesores;
    private com.github.lgooddatepicker.components.TimePicker timePicker1;
    private com.github.lgooddatepicker.components.TimePicker timePicker2;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtProfesor;
    // End of variables declaration//GEN-END:variables

    private boolean isHorarioProfesorHere(HorarioProfesor unHorarioProfesor) {
        boolean respuesta = false;
        for(int i=modeloTablaDias.getRowCount()-1;i>=0;i--){
                if(unHorarioProfesor.equals((HorarioProfesor)modeloTablaDias.getValueAt(i,2)))
                    respuesta = true;
        }
        return respuesta;
    }
    
    private void cargarTabla() {
        this.modeloTablaProfesor = new DefaultTableModel();
        modeloTablaProfesor.addColumn("Nombre");
        modeloTablaProfesor.addColumn("Apellido");
        modeloTablaProfesor.addColumn("Usuario");
        Object[] fila = new Object[3];
    try{
        for (Profesor miProfesor : miControlador.getListaProfesores()) {
            if (miProfesor.getEstado().equalsIgnoreCase("ACTIVO")) {
                fila[0] = miProfesor;
                fila[1] = miProfesor.getApellidoprofesor();
                fila[2] = miProfesor.getUsuario().getNombreusuario();
                modeloTablaProfesor.addRow(fila);
            }
        }
    }catch(Notificaciones ex){
        JOptionPane.showMessageDialog(null, ex.getMessage());
    }
        this.tablaProfesores.setModel(modeloTablaProfesor);
        this.rowSorter = new TableRowSorter<>(tablaProfesores.getModel());
        tablaProfesores.setRowSorter(rowSorter);
    }

    private void limpiarCampos() {
        this.txtBuscar.setText("");
        this.txtProfesor.setText("");
        int cantidadFilas = modeloTablaDias.getRowCount();
        for (int i = cantidadFilas - 1; i >= 0; i--) {
            modeloTablaDias.removeRow(i);
        }
        this.tablaProfesores.clearSelection();
    }
}
